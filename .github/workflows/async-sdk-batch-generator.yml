name: Generate new versions.

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-new-versions.outputs.versions }}
    steps: 
      - name: Get new versions
        id: get-new-versions
        run: |
          set -eux

          # Get new versions.
          LATEST_DONE_VERSION=$(
            git ls-remote --tags https://github.com/mmx86/lakefs-sdk-async.git \
            | sed -n 's#^.*refs/tags/##p' \
            | sed 's/\^{}//' \
            | sort --version-sort \
            | grep "^v" \
            | grep -v "^v0" \
            | tail -n1 \
          )
          NEW_VERSIONS=$(
            git ls-remote --tags https://github.com/treeverse/lakeFS.git \
            | sed -n 's#^.*refs/tags/##p' \
            | sed 's/\^{}//' \
            | sort -u \
            | sort -V \
            | grep "^v" \
            | grep -v "^v0" \
            | awk -v target="$LATEST_DONE_VERSION" '$1 == target { found=1; next } found { print }' \
          )

          # Convert newline-separated versions to JSON array
          NEW_VERSIONS_JSON=$(echo "$NEW_VERSIONS" | jq -R -s -c 'split("\n") | map(select(. != ""))')

          # Set output
          echo "versions=$NEW_VERSIONS_JSON" >> $GITHUB_OUTPUT

  generate-new-version:
    needs: setup
    if: ${{ needs.setup.outputs.versions != '[]' && needs.setup.outputs.versions != '' }}
    strategy:
      matrix:
        version: ${{ fromJSON(needs.setup.outputs.versions }}
      fail-fast: true  # Fail whole matrix on error
      max-parallel: 1
    uses: mmx86/lakefs-sdk-async/.github/workflows/async-sdk-version-generator.yml@master
    with:
      version: ${{ matrix.version }}
      
